<!DOCTYPE html>
<html lang="zh-CN">
  <head>
    <meta charset="UTF-8" />
    <meta name="viewport" content="maximum-scale=2.0, user-scalable=yes" />
    <meta http-equiv="X-UA-Compatible" content="ie=edge" />
    <meta name="google" content="notranslate" />
    <meta http-equiv="cache-control" content="max-age=0" />
    <meta http-equiv="cache-control" content="no-cache" />
    <meta http-equiv="expires" content="0" />
    <meta http-equiv="expires" content="Tue, 01 Jan 1980 1:00:00 GMT" />
    <title>网易猎头系统</title>
    <meta http-equiv="pragma" content="no-cache" />
    <script type="text/javascript">
      (function (document, datracker, root) {
        function loadJsSDK() {
          var script, first_script;
          script = document.createElement('script');
          script.type = 'text/javascript';
          script.async = true;
          script.src =
            'https://hubble-js-bucket.nosdn.127.net/DATracker.globals.1.6.8.js';
          first_script = document.getElementsByTagName('script')[0];
          first_script.parentNode.insertBefore(script, first_script);
        }
        if (!datracker['__SV']) {
          var win = window;
          var gen_fn,
            functions,
            i,
            lib_name = 'DATracker';
          window[lib_name] = datracker;
          datracker['_i'] = [];
          datracker['init'] = function (token, config, name) {
            var target = datracker;
            if (typeof name !== 'undefined') {
              target = datracker[name] = [];
            } else {
              name = lib_name;
            }
            target['people'] = target['people'] || [];
            target['abtest'] = target['abtest'] || [];
            target['toString'] = function (no_stub) {
              var str = lib_name;
              if (name !== lib_name) {
                str += '.' + name;
              }
              if (!no_stub) {
                str += ' (stub)';
              }
              return str;
            };
            target['people']['toString'] = function () {
              return target.toString(1) + '.people (stub)';
            };
            function _set_and_defer(target, fn) {
              var split = fn.split('.');
              if (split.length == 2) {
                target = target[split[0]];
                fn = split[1];
              }
              target[fn] = function () {
                target.push(
                  [fn].concat(Array.prototype.slice.call(arguments, 0)),
                );
              };
            }
            functions =
              'get_user_id track_heatmap register_attributes register_attributes_once clear_attributes unregister_attributes current_attributes single_pageview disable time_event get_appStatus track set_userId track_pageview track_links track_forms register register_once alias unregister identify login logout signup name_tag set_config reset people.set people.set_once people.set_realname people.set_country people.set_province people.set_city people.set_age people.set_gender people.increment people.append people.union people.track_charge people.clear_charges people.delete_user people.set_populationWithAccount  people.set_location people.set_birthday people.set_region people.set_account abtest.get_variation abtest.async_get_variable'.split(
                ' ',
              );
            for (i = 0; i < functions.length; i++) {
              _set_and_defer(target, functions[i]);
            }
            datracker['_i'].push([token, config, name]);
          };
          datracker['__SV'] = 1.6;
          loadJsSDK();
        }
      })(document, window['DATracker'] || [], window);
      const code =
        window.location.hostname === 'okr.netease.com'
          ? 'MA-A9DC-05ECC923E492'
          : 'MA-9367-9861AE4224B8';
      // 初始化
      DATracker.init(code, {
        is_single_page: true,
        single_page_config: {
          //注意：mode 一定要配置正确
          mode: 'history',
        },
        // 启动热力图采集
        heatmap: {
          //设置为true后，sdk自动给可以跳转的 a 标签绑定一个类似 DATracker.track_links() 的方法。
          //默认值为false
          isTrackLink: true,
        },
        truncateLength: 255,
        persistence: 'localStorage',
        cross_subdomain_cookie: false,
      });
    </script>
  </head>

  <body>
    <div id="root"></div>
    <script src="//nos.netease.com/watermark/nis.wm.js"></script>
    <script>
      setTimeout(() => {
        let watermark = document.getElementById('nis-water-container');
        // 观察器的配置（需要观察什么变动）
        const config = { attributes: true, childList: true, subtree: true };
        // 当观察到变动时执行的回调函数
        const callback = function (mutationsList, observer) {
          for (let mutation of mutationsList) {
            if (mutation.type === 'attributes') {
              // 监听属性
              const target = mutation.target;
              if (target === watermark) {
                document.body.replaceChild(watermark, target);
              }
            }
            mutation.removedNodes.forEach(function (item) {
              // 监听节点
              if (item === watermark) {
                document.body.appendChild(watermark);
              }
            });
          }
        };

        // 监听元素
        const targetNode = document.body;
        // 创建一个观察器实例并传入回调函数
        let observer = new MutationObserver(callback);
        observer.observe(targetNode, config);
      }, 10000);
    </script>
    <script src="https://s6.music.126.net/static_public/5e7dd9894cb30d2fd378f94f/2.6.0/music-corona.min.js"></script>
    <script>
      const domain = window.location.host;
      let env = 'dev';
      if (domain === 'okr.netease.com') {
        env = 'prod';
      }
      // 提供主动上报入口
      window.corona = window.MusicCorona({
        id: 1125, // 必传，配置应用 id
        env, // 必传，配置当前环境，支持的环境类型见下文文档部分
      });
    </script>
  </body>
</html>
